import * as React from 'react';
import { Course, Lesson, Module } from '../common/models';
import { getSP } from '../common/pnp';

type Props = { context: any; courseId?: number; courseCode?: string; preview?: boolean };
type State = {
	loading: boolean;
	course?: Course;
	modules: Module[];
	lessonsByModule: { [k: number]: Lesson[] };
	activeModuleId?: number;
	activeLessonId?: number;
	error?: string;
};

export default class CoursePlayer extends React.Component<Props, State> {
	constructor(props: Props) {
		super(props);
		this.state = { loading: true, modules: [], lessonsByModule: {} };
	}

	// ---------------- helpers ----------------
	private getCourseIdFromQS(): number | null {
		const qs = new URLSearchParams(window.location.search);
		const v = qs.get('courseId');
		return v ? Number(v) : null;
	}
	private escOData(s: string) {
		return (s || '').replace(/'/g, "''");
	}

	private async resolveCourseId(sp: any): Promise<number | null> {
		const qs = this.getCourseIdFromQS();
		if (qs && !isNaN(qs)) return qs;

		if (this.props.courseId && this.props.courseId > 0) return Number(this.props.courseId);

		if (this.props.courseCode) {
			const code = this.escOData(this.props.courseCode);
			const found = await sp.web.lists.getByTitle('Courses').items.select('Id', 'Code').filter(`Code eq '${code}'`).top(1)();
			return found.length ? found[0].Id : null;
		}
		return null;
	}

	public componentDidMount() {
		this.load();
	}

	public render() {
		if (this.state.loading) return <div>Loading…</div>;
		if (this.state.error) return <div style={{ color: 'red' }}>Error: {this.state.error}</div>;

		const { course, modules, lessonsByModule, activeModuleId, activeLessonId } = this.state;
		const active = activeModuleId && activeLessonId ? (lessonsByModule[activeModuleId] || []).filter((x) => x.Id === activeLessonId)[0] : null;

		return (
			<div>
				<h3>{course ? course.Title : 'Course'}</h3>
				<div style={{ display: 'flex', gap: '16px' }}>
					<div style={{ width: '30%' }}>
						{modules.map((m) => (
							<div key={m.Id}>
								<h4>{m.Title}</h4>
								<ul>
									{(lessonsByModule[m.Id] || []).map((l) => (
										<li key={l.Id}>
											<a
												href='#'
												onClick={(e) => {
													e.preventDefault();
													this.setState({ activeModuleId: m.Id, activeLessonId: l.Id });
												}}>
												{(l.Order0 || 0) + '. '}
												{l.Title}
											</a>
										</li>
									))}
								</ul>
							</div>
						))}
					</div>
					<div style={{ flex: 1 }}>{active ? this.renderLesson(active) : <div>Select a lesson…</div>}</div>
				</div>
			</div>
		);
	}

	private async load() {
		const sp = getSP(this.props.context);

		try {
			const id = this.props.courseId;
			if (!id) {
				this.setState({ loading: false, error: 'No courseId configured' });
				return;
			}

			// Course
			const courseItem = await sp.web.lists.getByTitle('Courses').items.select('Id', 'Title', 'Description', 'ThumbnailUrl').filter(`Id eq ${id}`).top(1)();
			if (!courseItem.length) {
				this.setState({ loading: false, error: 'Course not found' });
				return;
			}
			const course = courseItem[0];
			this.setState({
				course: { Id: course.Id, Title: course.Title, Description: course.Description, ThumbnailUrl: course.ThumbnailUrl }
			});

			const modsRaw = await sp.web.lists
				.getByTitle('Modules')
				.items.select('Id', 'Title', 'Order0', 'CourseId')
				.filter(`CourseId eq ${id}`)
				.orderBy('Order0', true)
				.orderBy('Id', true)
				.top(5000)();

			const modules: Module[] = modsRaw.map((m: any) => ({
				Id: m.Id,
				Title: m.Title,
				Order0: m.Order0,
				CourseId: id
			}));
			this.setState({ modules });

			let lessonsBy: { [k: number]: Lesson[] } = {};
			if (modules.length) {
				const ids: number[] = modules.map((m) => m.Id);

				const lessonsRaw = await sp.web.lists
					.getByTitle('Lessons')
					.items.select('Id', 'Title', 'Order0', 'ContentTypeChoice', 'ContentUrl', 'HtmlContent', 'QuizJson', 'EstimatedMinutes', 'Module/Id', 'Module/Title')
					.expand('Module')
					.orderBy('ModuleId', true)
					.orderBy('Order0', true)
					.orderBy('Id', true)
					.top(5000)();

				(lessonsRaw || []).forEach((l: Lesson) => {
					const modId = l.Module ? l.Module.Id : l.ModuleId;

					if (ids.indexOf(modId) === -1) return;
					(lessonsBy[modId] = lessonsBy[modId] || []).push({
						Id: l.Id,
						Title: l.Title,
						Order0: l.Order0,
						ContentType: l.ContentType,
						ContentUrl: l.ContentUrl,
						HtmlContent: l.HtmlContent,
						QuizJson: l.QuizJson,
						EstimatedMinutes: l.EstimatedMinutes,
						ModuleId: modId
					} as Lesson);
				});
			}

			const firstModuleId = modules.length ? modules[0].Id : undefined;
			const firstLessonId = firstModuleId && lessonsBy[firstModuleId] && lessonsBy[firstModuleId][0] ? lessonsBy[firstModuleId][0].Id : undefined;

			this.setState({
				lessonsByModule: lessonsBy,
				activeModuleId: firstModuleId,
				activeLessonId: firstLessonId,
				loading: false
			});
		} catch (e) {
			this.setState({ loading: false, error: e && (e as any).message ? (e as any).message : String(e) });
		}
	}

	private renderLesson(l: Lesson) {
		if (l.ContentType === 'HTML') return <div dangerouslySetInnerHTML={{ __html: l.HtmlContent || '' }} />;
		if (l.ContentType === 'PDF' || l.ContentType === 'PPT' || l.ContentType === 'Link') return <iframe src={l.ContentUrl} style={{ width: '100%', height: 600 }} />;
		if (l.ContentType === 'Video') return <video src={l.ContentUrl} controls style={{ width: '100%' }} />;
		if (l.ContentType === 'Audio') return <audio src={l.ContentUrl} controls />;
		if (l.ContentType === 'Quiz') return <div>Quiz (todo)</div>;
		return <div>Unsupported content.</div>;
	}
}
